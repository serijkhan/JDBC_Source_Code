<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 17 Mar 2023 16:03:09 GMT</lastBuildDate><item><title><![CDATA[Kotlin DSLs in the world of Springdom]]></title><link>https://spring.io/blog/2023/03/16/kotlin-dsls-in-the-world-of-springdom</link><guid isPermaLink="true">https://spring.io/blog/2023/03/16/kotlin-dsls-in-the-world-of-springdom</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Fri, 17 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Kotlin is a beautiful language that makes it trivial to take old Java libraries and make them much more concise, just by virtue of the Kotlin syntax itself. It shines, however, when you write DSLs.&lt;/p&gt;
&lt;p&gt;Here&apos;s some inside baseball for you: the Spring teams do their level-headed best to be cohesive, to align on core themes, and to make Spring better than the sum of its parts. You see this in every major release: XML namespaces in Spring Framework 2.0. Java Config in 3.0. Conditionals and autoconfiguration when Spring Boot 1.0 first shipped alongside Spring Framework 4.0. Reactive programming with Spring Framework 5.0. And, of course, ahead-of-time compilation in Spring Framework 6.0. And whenever the baseline revisions of platform specifications like Java or Jakarta EE change, so do the minimums for all the projects building on the corresponding Spring Framework release. But not with Kotlin. It&apos;s one of those things that grew organically. There was no mandate from on high. It started in Spring Framework, and different teams, when they saw the opportunity, added appropriate support to their respective projects when they could, often in tandem with the community. Kotlin&apos;s awesome.&lt;/p&gt;
&lt;p&gt;Kotlin has several features that make it easy to build DSLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functions that accept lambdsa can accept the lambas &lt;em&gt;outside&lt;/em&gt; of the parenthesis for the funciton invocation&apos;&lt;/li&gt;
&lt;li&gt;if the only argument expected for the function happens to be a lambda, there&apos;s no need to specify the parenthesis at all&lt;/li&gt;
&lt;li&gt;DSLs may be written so that the &lt;code&gt;this&lt;/code&gt; reference-the &lt;em&gt;reciever&lt;/em&gt;-of the lambda can point to an arbitrary context object of the framework&apos;s choosing. So rather than having all DSLs look like this: &lt;code&gt;{ context -&gt; context.a() } &lt;/code&gt; we can instead just write &lt;code&gt;{ a() }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;extension functions are a typesafe way to add new functions to existing types without changing the source code for those types. This means types that work one way in Java can have alternative extended behavior in Kotlin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog, I want to introduce some examples of DSLs across the wide and wonderful world of Springdom, highlighting some (but not all!) of my favorite DSLs.  The code for all these examples and the corresponding Kotlin-language Gradle build files &lt;a href=&quot;https://github.com/coffee-software-show/lets-code-kotlin&quot;&gt;is here&lt;/a&gt; if you want to follow along at home. Inspect the &lt;code&gt;dsls&lt;/code&gt; folder for the examples we&apos;ll look at in this blog.&lt;/p&gt;
&lt;p&gt;Let&apos;s dive right in.&lt;/p&gt;
&lt;h2&gt;Spring Framework Functional Bean Registrations&lt;/h2&gt;
&lt;p&gt;We introduced functional bean registration in Spring Framework 5.0 way back in 2017.  It&apos;s a way to programmatically register beans with the Spring Framework in an &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;. It sidesteps some of the reflection and component scanning required for Javca configuration. We quite like the approach, and indeed, when you use Spring&apos;s GraalVM native image support, we &lt;em&gt;transpile&lt;/em&gt;, sort of, your &lt;code&gt;@Configuration&lt;/code&gt; Java configuration classes into functional bean registrations before feeding the whole thing to the GraalVM native image compiler. It&apos;s a nice DSL, but I love how it pulls together when using Kotlin. I don&apos;t have a standalone example of this in the sample code, but in most of the examples, I use the functional style, so I want to get it out of the way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package com.example.beans

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.support.beans
import org.springframework.web.servlet.function.ServerResponse
import org.springframework.web.servlet.function.router

@SpringBootApplication
class FunctionalBeanRegistrationApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;FunctionalBeanRegistrationApplication&gt;(*args) {
        addInitializers(beans {
            bean {
            	val db = ref&amp;#x3C;javax.sql.DataSource&gt;()
                CustomerService(db)
            }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few other niceties there, too: notice that when using Spring Boot, you&apos;re not using the normal &lt;code&gt;SpringApplication.run(Class, String[] args)&lt;/code&gt;, but instead, use &lt;code&gt;runApplication&lt;/code&gt;. The last parameter of &lt;code&gt;runApplication&lt;/code&gt; is a lambda that has as its receiver a reference to the &lt;code&gt;GenericApplicationContext&lt;/code&gt; that gets created when calling &lt;code&gt;SpringApplication#run&lt;/code&gt;. This gives us a chance to post-process the &lt;code&gt;GenericApplicationContext&lt;/code&gt; and to call  &lt;code&gt;addInitializers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, we use the convenient &lt;code&gt;beans&lt;/code&gt; DSL, rather than writing an implementation of &lt;code&gt;ApplicationContextInitializer&amp;#x3C;GenericApplicationContext&gt;&lt;/code&gt; ourselves.&lt;/p&gt;
&lt;p&gt;We can also use the &lt;code&gt;ref&lt;/code&gt; method and the reified generics for the bean type to look up and inject another bean (of type &lt;code&gt;javax.sql.DataSource&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Remember that Spring doesn&apos;t care how you furnish your bean definitions: use XML, Java Configuration, component scanning, functional bean registration, etc., and Spring is happy either way. Of course, you can also see all of them in the sample application from Java or Kotlin. But, again, it doesn&apos;t matter: they all end up as canonicalized &lt;code&gt;BeanDefinition&lt;/code&gt;s that then get wired together to form the final, running application. So you can mix and match. I often do!&lt;/p&gt;
&lt;h2&gt;Functional HTTP Endpoints with Spring MVC and Spring Webflux&lt;/h2&gt;
&lt;p&gt;Everybody knows Spring&apos;s &lt;code&gt;@Controller&lt;/code&gt; abstraction. Still, many other frameworks support an alternative syntax, a la Ruby&apos;s Sinatra, where a lambda is associated with a predicate describing how to match an incoming request. Spring finally got one in Spring Framework 5. The DSL in Java is concise but even more admirable in Kotlin. This functional endpoint style is implemented for both Spring MVC &lt;em&gt;and&lt;/em&gt; Sprihng Webflux. However, the MVC implementation came later, so some folks may not have tried it out yet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package com.example.fnmvc

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.support.beans
import org.springframework.web.servlet.function.ServerResponse
import org.springframework.web.servlet.function.router

@SpringBootApplication
class FnMvcApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;FnMvcApplication&gt;(*args) {
        addInitializers(beans {
            bean {
                router {
                    GET(&quot;/hello&quot;) {
                        ServerResponse.ok().body(mapOf(&quot;greeting&quot; to &quot;Hello, world!&quot;))
                    }
                }
            }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty straightforward: when an HTTP &lt;code&gt;GET&lt;/code&gt; request arrives, produce a response, which in this case is a &lt;code&gt;Map&amp;#x3C;String, String&gt;&lt;/code&gt;. Spring MVC will, in turn, serialize that, just as if you had returned a &lt;code&gt;Map&amp;#x3C;String, String&gt;&lt;/code&gt; from a Spring MVC &lt;code&gt;@Controller&lt;/code&gt; handler method. Nice!&lt;/p&gt;
&lt;h2&gt;Corouitines&lt;/h2&gt;
&lt;p&gt;Coroutines are one of the most powerful ways to describe scalable, concurrent code in Kotklin without muddying the code with chains of invocations (à la Promises in Javascript or &lt;code&gt;Publisher&amp;#x3C;T&gt;s&lt;/code&gt; in Reactor), or callbacks, or the like. If you&apos;re using the reactive stack in Spring, then you&apos;re already set to use coroutines, as we&apos;ve worked to make it so that everywhere you would&apos;ve used a reactive type can also be &lt;code&gt;await-ed&lt;/code&gt;. You just need to see it to believe it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package bootiful.reactive

import kotlinx.coroutines.flow.Flow
import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.support.beans
import org.springframework.data.annotation.Id
import org.springframework.data.repository.kotlin.CoroutineCrudRepository
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.reactive.function.server.ServerResponse
import org.springframework.web.reactive.function.server.bodyAndAwait
import org.springframework.web.reactive.function.server.coRouter

@SpringBootApplication
class ReactiveApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;ReactiveApplication&gt;(*args) {
        addInitializers(beans {
            bean {
                val repo = ref&amp;#x3C;CustomerRepository&gt;()
                coRouter {
                    GET(&quot;/customers&quot;) {
                        val customers : Flow&amp;#x3C;Customer&gt; = repo.findAll()
                        ServerResponse.ok().bodyAndAwait(customers)
                    }
                }
            }
        })
    }
}

@RestController
class CustomerHttpController(private val repo: CustomerRepository) {

    @GetMapping(&quot;/customers/{id}&quot;)
    suspend fun customersById(@PathVariable id: Int): Customer {
        val customer:Customer = this.repo.findById(id) !!
        println(&quot;the id is ${customer.id} and the name is ${customer.name}&quot;)
        return customer
    }
}

data class Customer(@Id val id: Int, val name: String)

interface CustomerRepository : CoroutineCrudRepository&amp;#x3C;Customer, Int&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code looks pretty straightforward, I hope, but behind the scenes, the library and the Kotlin runtime are doing a special kind of sorcery that means that, while there is no data available from the sockets returning the data requested from the http server or the underlying database, the thread that was reading that data isn&apos;t waiting for it. The thread is free for reuse in the rest of the stack, granting much greater scalability. All we had to do was switch to &lt;code&gt;CoroutineCrudRepository&lt;/code&gt; and - if doing functional HTP endpoints - make sure we have switched on the &lt;code&gt;coRouter&lt;/code&gt; instead of &lt;code&gt;router&lt;/code&gt;. Magic. Delicious magic. But magic, nonetheless. &quot;I can&apos;t believe it&apos;s not blocking imperative inefficient code!&quot;  -Fabio&lt;/p&gt;
&lt;h2&gt;Spring Security&lt;/h2&gt;
&lt;p&gt;This example looks at the custom Spring Security DSL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package com.example.security

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.support.beans
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.annotation.web.invoke
import org.springframework.security.core.userdetails.User
import org.springframework.security.provisioning.InMemoryUserDetailsManager
import org.springframework.web.servlet.function.ServerResponse
import org.springframework.web.servlet.function.router

@SpringBootApplication
@EnableWebSecurity
class SecurityApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;SecurityApplication&gt;(*args) {
        addInitializers(beans {
            bean {
                val http = ref&amp;#x3C;HttpSecurity&gt;()
                http {
                    httpBasic {}
                    authorizeRequests {
                        authorize(&quot;/hello/**&quot;, hasAuthority(&quot;ROLE_ADMIN&quot;))
                    }
                }
                .run { http.build() }
            }

            bean {
                InMemoryUserDetailsManager(
                    User.withDefaultPasswordEncoder()
                        .username(&quot;user&quot;)
                        .password(&quot;password&quot;)
                        .roles(&quot;ADMIN&quot;)
                        .build()
                )
            }

            bean {
                router {
                    GET(&quot;/hello&quot;) {
                        ServerResponse.ok().body(mapOf(&quot;greeting&quot; to &quot;Hello, world!&quot;))
                    }
                }
            }
        })
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example uses functional bean registration. Most of this is familiar. What may be novel is the fact that we&apos;re using the injected &lt;code&gt;HttpSecurity&lt;/code&gt; reference and implicitly calling an extension method, &lt;code&gt;invoke&lt;/code&gt;, that gives us a DSL in which we can configure things like the fact that we want HTTP BASIC, we want to authorize specific endpoints, etc. We&apos;re defining a bean, so we need to return a value.&lt;/p&gt;
&lt;p&gt;Very convenient!&lt;/p&gt;
&lt;h2&gt;Spring Data MongoDB Type Safe Queries&lt;/h2&gt;
&lt;p&gt;Countless third-party data access libraries ship with an annotation processor that performs code generation so that you can access your domain model in a typesafe fashion, with checks guaranteed by the compiler. In Kotlin, it is possible to do much of that without an extra tool beyond the Kotlin compiler and language.&lt;/p&gt;
&lt;p&gt;Here&apos;s a simple example that writes some data to the database, then queries it using Kotlin&apos;s field reference mechanism:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package com.example.mongodb

import org.springframework.boot.ApplicationRunner
import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.MongoOperations
import org.springframework.data.mongodb.core.find
import org.springframework.data.mongodb.core.query.Query
import org.springframework.data.mongodb.core.query.isEqualTo
import org.springframework.data.repository.CrudRepository

@SpringBootApplication
class MongodbApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;MongodbApplication&gt;(*args)
}

@Configuration
class TypeSafeQueryExampleConfiguration {

    @Bean
    fun runner(cr: CustomerRepository, mongoOperations: MongoOperations) = ApplicationRunner {
        cr.deleteAll()
        cr.save(Customer(null, &quot;A&quot;))
        cr.save(Customer(null, &quot;B&quot;))
        cr.findAll().forEach {
            println(it)
        }
        val customers: List&amp;#x3C;Customer&gt; = mongoOperations.find&amp;#x3C;Customer&gt;(
            Query(Customer::name isEqualTo &quot;B&quot;)
        )
        println(customers)
    }
}

data class Customer(@Id val id: String?, val name: String)

interface CustomerRepository : CrudRepository&amp;#x3C;Customer, String&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&apos;s a typical application otherwise: we have a Spring Data repository, an entity, etc. We even use one of Spring&apos;s well-known &lt;code&gt;\*Template&lt;/code&gt; variants! The only thing exceptional here is that query in the &lt;code&gt;find()&lt;/code&gt; call where we say &lt;code&gt;Customer::name isEqualTo &quot;B&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Go with the Flow with Spring Integration&lt;/h2&gt;
&lt;p&gt;Spring Integration is one of the oldest SPring projects and offers a fit-for-purpose way to describe integration pipelines - we call them &lt;em&gt;flows&lt;/em&gt; - to act on events (we model them as &lt;code&gt;Mesasage&amp;#x3C;T&gt;&lt;/code&gt;s). These pipelines can have many operations, each chained together.  Spring Integration provides a lovely &lt;code&gt;IntegrationFlow&lt;/code&gt; DSL that uses context objects to provide the DSL. But, at least it feels much cleaner when expressed in Kotlin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package com.example.integration

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.context.support.beans
import org.springframework.integration.dsl.integrationFlow
import org.springframework.integration.file.dsl.Files
import org.springframework.integration.file.transformer.FileToStringTransformer
import java.io.File

@SpringBootApplication
class IntegrationApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;IntegrationApplication&gt;(*args) {
        addInitializers(beans {
            bean {
                integrationFlow(
                    Files.inboundAdapter(File(&quot;/Users/jlong/Desktop/in&quot;)),
                    { poller { it.fixedDelay(1000) } }
                ) {
                    transform(FileToStringTransformer())
                    transform&amp;#x3C;String&gt; { it.uppercase() }
                    handle {
                        println(&quot;new message: ${it.payload}&quot;)
                    }
                }
            }
        })
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Does this inbound flow make sense to you? It says: scan the directory (my computer&apos;s &lt;code&gt;$HOME/Desktop/in&lt;/code&gt; folder) every 1000 milliseconds (a second), and when there&apos;s a new &lt;code&gt;java.io.File&lt;/code&gt; detected, pass it to the &lt;code&gt;transform&lt;/code&gt; operation, which will turn the &lt;code&gt;File&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;. The &lt;code&gt;String&lt;/code&gt; is then sent to the next &lt;code&gt;transform&lt;/code&gt; operation, which uppercases the text. That uppercased text is then sent to the last operation, &lt;code&gt;handle&lt;/code&gt;, where I print out the uppercased text.&lt;/p&gt;
&lt;h2&gt;Easy Microproxies with Spring Cloud Gateway&lt;/h2&gt;
&lt;p&gt;Spring Cloud Gateway is one of my favorite Spring Cloud modules. It makes it trivial to handle cross-cutting concerns at the HTTP and service levels. There&apos;s also integration for things like GRPC and wesockets. It&apos;s pretty easy to understand: you use the &lt;code&gt;RouteLocatorBuilder&lt;/code&gt; to define &lt;code&gt;routes&lt;/code&gt;, which have predicates matching incoming requests. If they&apos;re matched, you can apply zero or more filters to the request before sending it to the final &lt;code&gt;uri&lt;/code&gt; you specify. It&apos;s a functional pipeline, so it shouldn&apos;t be surprising it expresses nicely in a Kotlin DSL. Let&apos;s look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
package com.example.gateway

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder
import org.springframework.cloud.gateway.route.builder.filters
import org.springframework.cloud.gateway.route.builder.routes
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.http.HttpHeaders

@SpringBootApplication
class GatewayApplication

fun main(args: Array&amp;#x3C;String&gt;) {
    runApplication&amp;#x3C;GatewayApplication&gt;(*args)
}

@Configuration
class GatewayConfiguration {

    @Bean
    fun gateway(rlb: RouteLocatorBuilder) = rlb
        .routes {
            route {
                path(&quot;/proxy&quot;)
                filters {
                    setPath(&quot;/bin/astro.php&quot;)
                    addResponseHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, &quot;*&quot;)
                }
                uri(&quot;https://www.7timer.info/&quot;)
            }
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example matches the request bound for &lt;code&gt;localhost:8080/proxy&lt;/code&gt; and forwards the request to a random open HTTP web service I found on the internet that is supposed to give you weather reports. I use the filter to augment the response, adding custom headers, &lt;code&gt;ACCESS_CONTROL_ALLOW_ORIGIN&lt;/code&gt;, to the response. Try it out in the browser, as I think the default response without any of the parameters is some binary data - an image.&lt;/p&gt;
&lt;h2&gt;Kotlin and Spring are a win-win&lt;/h2&gt;
&lt;p&gt;I&apos;ve only touched on some of the fantastic DSLs present in Spring and across the portfolio that provide new types to do the same things as were possible in the Java DSLs. There&apos;s also a whole host of existing libraries for which we&apos;ve written extension functions - essentially adding new paint onto old structures to make them more idiomatic for Kotlin developers. My favorite example of this is the &lt;code&gt;JdbcTemplate&lt;/code&gt;, which has been around in some form or another for 20+ years, yet it feels like it was written yesterday with Kotlin in mind!&lt;/p&gt;
&lt;p&gt;You can get started, as usual, by checking out the &lt;a href=&quot;https://start.spring.io&quot;&gt;Spring Initializer&lt;/a&gt;. Make sure to choose &lt;code&gt;Kotlin&lt;/code&gt; as your language. You can even ask for a Kotlin-language Gradle build, too!&lt;/p&gt;
&lt;p&gt;There are plenty of great (and mostly free) resources, &lt;a href=&quot;https://spring.io/guides&quot;&gt;including the guides&lt;/a&gt; - which  provide text-centric walkthroughs, and  the Spring Academy (which are video guided walkthroughs, and they even provide a path to certification!) introducing the various APIs and projects  we introduced in this blog, albeit in Java. Kotlin itself is a nice language and easy enough to learn. I&apos;ve got a ton of content over on my channel looking &lt;a href=&quot;https://youtube.com/@coffeesoftware&quot;&gt;at  Kotlin (and other things)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And of course, if you can swing the cash, we&apos;re having our big tentpole event, &lt;a href=&quot;https://www.vmware.com/explore/us.html&quot;&gt;SpringOne@VMWare Explore&lt;/a&gt;, this August in Las Vegas. Join us. The CFP is open &lt;a href=&quot;https://event.vmware.com/flow/vmware/explore2023lv/cfp/cfpHome&quot;&gt;until the end of March&lt;/a&gt;, too, so feel free to submit. We&apos;d love to see you in Las Vegas!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Spring Batch lead Mahmoud Ben Hassine on the latest and greatest in 2023]]></title><link>https://spring.io/blog/2023/03/16/a-bootiful-podcast-spring-batch-lead-mahmoud-ben-hassine-on-the-latest-and</link><guid isPermaLink="true">https://spring.io/blog/2023/03/16/a-bootiful-podcast-spring-batch-lead-mahmoud-ben-hassine-on-the-latest-and</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 16 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;iframe title=&quot;Spring Batch lead Mahmoud Ben Hassine on the latest and greatest in Spring Batch in 2023&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=5w9dz-13bbac6-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;! In this installment, &lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Spring Batch lead &lt;a href=&quot;https://twitter.com/FMBENHASSINE&quot;&gt;Mahmoud Ben Hassine (@FMBENHASSINE)&lt;/a&gt; about the latest and greatest in Spring Batch.&lt;/p&gt;
&lt;h2&gt;notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://event.vmware.com/flow/vmware/explore2023lv/cfp&quot;&gt;Submit your talk to SpringOne@Explore&lt;/a&gt;, being held August 21-24, 2023, in lovely Las Vegas, Nevada!&lt;/li&gt;
&lt;li&gt;I wrote an e-book looking at how to &lt;a href=&quot;https://tanzu.vmware.com/content/white-papers/spring-boot-3&quot;&gt;do AOT processing with Spring Boot 3 and GraalVM&lt;/a&gt;. It&apos;s free - and a fairly quick read - so get it while you can!&lt;/li&gt;
&lt;li&gt;I streamed this interview with Mahmoud live on my channel - &lt;a href=&quot;https://www.youtube.com/watch?v=0U7tdsQd14c&quot;&gt;you can watch it there&lt;/a&gt;, too, if you prefer&lt;/li&gt;
&lt;li&gt;I wrote a blog looking at some of the &lt;a href=&quot;https://spring.io/blog/2023/03/16/kotlin-dsls-in-the-world-of-springdom&quot;&gt;amazing Kotlin DSLs in the wide and wonderful world of Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did a video &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;introducing Spring Boot 3 over on the Jetbrains IntelliJ IDEA Youtube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Tools 4.18.0 released]]></title><link>https://spring.io/blog/2023/03/15/spring-tools-4-18-0-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/15/spring-tools-4-18-0-released</guid><dc:creator><![CDATA[Martin Lippert]]></dc:creator><pubDate>Wed, 15 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.18.0 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;h4&gt;updates to the Spring Tools 4 for Eclipse distribution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;updated to Eclipse 2023-03 release (&lt;a href=&quot;https://eclipseide.org/release/noteworthy/&quot;&gt;new and noteworthy&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;important highlights&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;(Spring Boot):&lt;/em&gt; new and vastly improved content-assist for Spring Data repository query methods (thanks to contributions from @danthe1st)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Spring Boot):&lt;/em&gt; the additional reconciling of Spring Boot projects to show Spring specific validations, outdated versions and more, now reports progress, runs faster, and uses less memory - please consider using this and tell us about your experiences and if you hit issues while having this feature enabled&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(VSCode):&lt;/em&gt; fixed an extremely annoying issue that caused regular Java content-assist in VSCode to stop working after a short while&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Eclipse):&lt;/em&gt; a bug in m2e got fixed and is included in this release, which caused resource files (e.g. &lt;code&gt;application.properties&lt;/code&gt;) to not be copied into the target folder anymore. This works again and automatically copies your changed &lt;code&gt;application.properties&lt;/code&gt; file to the target folder, so that those changes are taken into account when running the project automatically again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found in the release notes: &lt;a href=&quot;https://github.com/spring-projects/sts4/releases/tag/4.18.0.RELEASE&quot;&gt;https://github.com/spring-projects/sts4/releases/tag/4.18.0.RELEASE&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;downloads&lt;/h4&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Tools 4: &lt;a href=&quot;https://spring.io/tools/&quot;&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Tools 4.18.1 is scheduled to be released in late April 2023.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - March 14th, 2023]]></title><link>https://spring.io/blog/2023/03/14/this-week-in-spring-march-14th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/03/14/this-week-in-spring-march-14th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 14 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Happy Pi (?) day! And, welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&apos;s pouring cats and dogs here in San Francisco! The news is talking about &lt;em&gt;atmospheric rivers&lt;/em&gt;; I don&apos;t know what that means but I don&apos;t know that I want to find out. Anyway, all that to say: I&apos;m glad as always for an opportunity to stay indoors and learn. We&apos;ve got a lot to review this week so let&apos;s dive right into it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I did a video for our friends at Jetbrains on the IntelliJ IDEA Youtube channel and people seem to like it. Perhaps you will too? &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;Bootiful Spring Boot 3 - YouTube&lt;/a&gt; In it, I look at just some of the amazing new features in Spring Boot 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/08/the-springone-explore-calls-for-paper-is-open&quot;&gt;The SpringOne@Explore Calls for Paper is Open!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/09/a-bootiful-podcast-google-cloud-java-advocate-aaron-wanjala&quot;&gt;A Bootiful Podcast: Google Cloud Java Advocate Aaron Wanjala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/730689836/0/baeldung~API-First-Development-with-Spring-Boot-and-OpenAPI&quot;&gt;API First Development with Spring Boot and OpenAPI 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/application-modernization/announcing-spring-framework-on-cloud-4&quot;&gt;Announcing Spring Cloud GCP 4.0 | Google Cloud Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Nefd6qdpdSI&quot;&gt;Build a CRUD Rest API in Java using Spring boot, Hibernate, Postgres, Docker and Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Did you know Java now has &lt;code&gt;records&lt;/code&gt;? And that &lt;code&gt;records&lt;/code&gt; are amazingly flexible? &lt;a href=&quot;https://feeds.feedblitz.com/~/730553864/0/baeldung~Custom-Constructor-in-Java-Records&quot;&gt;Custom Constructor in Java Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My buddy Francesco did a video - from the perspective of someone who hasn&apos;t worked with Java all that much - on how to build a CRUD application in Java. &lt;a href=&quot;https://dev.to/francescoxx/java-crud-rest-api-using-spring-boot-hibernate-postgres-docker-and-docker-compose-5cln&quot;&gt;Java CRUD Rest API using Spring Boot, Hibernate, Postgres, Docker and Docker Compose&lt;/a&gt; Very interesting, and worth a read!&lt;/li&gt;
&lt;li&gt;This is an interesting look at the &lt;a href=&quot;https://feeds.feedblitz.com/~/730688582/0/baeldung~Maven-Reactor&quot;&gt;Maven Reactor&lt;/a&gt;. Nice! I think demystifying some of this stuff will make Maven a lot more approachable to a lot of people.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vaadin/flow/releases/tag/24.0.0&quot;&gt;Release Vaadin Flow 24.0.0 · vaadin/flow&lt;/a&gt; Congrats to the Vaadin team on their new release of Vaadin, which is also compatible with Spring Boot 3.&lt;/li&gt;
&lt;li&gt;Interesting: what if you want to &lt;a href=&quot;https://feeds.feedblitz.com/~/730972334/0/baeldung~TRUNCATE-TABLE-in-Spring-Data-JPA&quot;&gt;&lt;code&gt;TRUNCATE&lt;/code&gt; a table in Spring Data JPA&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/730994351/0/baeldung~Testing-Spring-OAuth-AccessControl&quot;&gt;Testing Spring OAuth2 Access-Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This isn&apos;t strictly speaking related to Spring, but it&apos;s very useful as a diagnostic aid, either way. It&apos;s how to &lt;a href=&quot;https://blog.jooq.org/using-jooqs-diagnosticsconnection-to-detect-n1-queries/&quot;&gt; use jOOQs &lt;code&gt;DiagnosticsConnection&lt;/code&gt; to detect N+1 Queries  Java, SQL and jOOQ.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/JavaAtMicrosoft/status/1634343024896475142&quot;&gt;Learn about #SpringBoot tooling in #VisualStudioCode from experts at Microsoft and VMware. Get the Spring Boot Dashboard for Visual Studio Code here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast:  Google Cloud Java Advocate Aaron Wanjala]]></title><link>https://spring.io/blog/2023/03/09/a-bootiful-podcast-google-cloud-java-advocate-aaron-wanjala</link><guid isPermaLink="true">https://spring.io/blog/2023/03/09/a-bootiful-podcast-google-cloud-java-advocate-aaron-wanjala</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 09 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! In this installment, &lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Google Cloud Java advocate &lt;a href=&quot;https://twitter.com/AaronMDubya&quot;&gt;Aaron Wanjala (@ AaronMDubya)&lt;/a&gt; about Spring Framework for Google Cloud&lt;/p&gt;
&lt;iframe title=&quot;Google Cloud Java Advocate Aaron Wanjala&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=jrsce-13b10d0-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[The SpringOne@Explore Calls for Paper is Open!]]></title><link>https://spring.io/blog/2023/03/08/the-springone-explore-calls-for-paper-is-open</link><guid isPermaLink="true">https://spring.io/blog/2023/03/08/the-springone-explore-calls-for-paper-is-open</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! The Spring community is everything. Without your voice, there is no Spring. And we love to hear from you. Make your voice heard and &lt;strong&gt;&lt;a href=&quot;https://event.vmware.com/flow/vmware/explore2023lv/cfp/cfpHome&quot;&gt;submit a talk&lt;/a&gt;&lt;/strong&gt; for the &lt;strong&gt;SpringOne@Explore&lt;/strong&gt; conference being held in tandem with &lt;a href=&quot;https://www.vmware.com/explore.html&quot;&gt;VMWare  Explore&lt;/a&gt; in Las Vegas August 21st to 24th, 2023.&lt;/p&gt;
&lt;p&gt;See you in Vegas!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Cloud Data Flow 2.10.2 Released]]></title><link>https://spring.io/blog/2023/03/08/spring-cloud-data-flow-2-10-2-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/08/spring-cloud-data-flow-2-10-2-released</guid><dc:creator><![CDATA[Corneil du Plessis]]></dc:creator><pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, we are very excited to announce the &lt;code&gt;2.10.2&lt;/code&gt; release of Spring Cloud Data Flow is now available from Maven Central. &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.10.2&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Spring updates&lt;/h3&gt;
&lt;p&gt;Updates to the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot 2.7.9&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Stay in touch...&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud-dataflow&quot;&gt;Project Page&lt;/a&gt;
&lt;a href=&quot;https://dataflow.spring.io/&quot;&gt;Data Flow Mini-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud-dataflow&quot;&gt;Stackoverflow&lt;/a&gt; or &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-dataflow/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 0.5 released]]></title><link>https://spring.io/blog/2023/03/08/spring-modulith-0-5-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/08/spring-modulith-0-5-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am excited to announce the availability of Spring Modulith 0.5. The most relevant features the release ships are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/152&quot;&gt;#152&lt;/a&gt;  A dedicated starter to ease inclusion of actuator and observability features&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/163&quot;&gt;#163&lt;/a&gt;  The renamed property to trigger JDBC database initialization. (&lt;code&gt;spring.modulith.events.schema-initialization.enabled&lt;/code&gt; -&gt; &lt;code&gt;spring.modulith.events.jdbc-schema-initialization.enabled&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/149&quot;&gt;#149&lt;/a&gt;  Default to await termination of task executors unless configured not to&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/150&quot;&gt;#150&lt;/a&gt;  &lt;code&gt;Scenario&lt;/code&gt; should run stimulus in new transaction&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/162&quot;&gt;#162&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues/154&quot;&gt;#154&lt;/a&gt;  The usual dependency upgrades (Spring Boot 3.0.4, jMolecules 2022.2.4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please consult the complete &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.5.0&quot;&gt;changelog&lt;/a&gt; or the &lt;a href=&quot;https://docs.spring.io/spring-modulith/docs/0.5.0/reference/html/&quot;&gt;reference documentation&lt;/a&gt;. Please provide feedback in the &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/issues&quot;&gt;bug tracker&lt;/a&gt; or &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/discussions&quot;&gt;discussion forums&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - March 7th, 2023]]></title><link>https://spring.io/blog/2023/03/07/this-week-in-spring-march-7th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/03/07/this-week-in-spring-march-7th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 07 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&apos;s an amazing week, and this week we&apos;ve got a lot to look at. Let&apos;s dive right into it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/02/spring-cloud-function-for-azure-function&quot;&gt;Spring Cloud Function for Azure Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/03/spring-data-2022-0-3-and-2021-2-9-released&quot;&gt;Spring Data 2022.0.3 and 2021.2.9 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gokhana.dev/spring-r2dbc-for-reactive-relational-databases-in-reactive-programming/&quot;&gt;Spring R2DBC for Reactive Relational Databases in Reactive Programming | Gökhan Ayranc?o?lu - Software Engineer, Blogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I&apos;ll be joining Mark Thomas, legendary contributor to Apache Tomcat, &lt;a href=&quot;https://www.youtube.com/watch?v=IgtpMcq3AX8&quot;&gt;&lt;em&gt;live&lt;/em&gt; at 9am here &lt;/a&gt;. Join us, bring your questions, etc.&lt;/li&gt;
&lt;li&gt;JRebel has a nice look &lt;a href=&quot;https://www.jrebel.com/blog/spring-6-features&quot;&gt;at the New Features in Spring Framework 6 | JRebel by Perforce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729726380/0/baeldung~Authenticating-Users-with-AzureAD-in-Spring-Boot&quot;&gt;Authenticating Users with AzureAD in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729489977/0/baeldung~Debugging-Spring-Method-Annotations-Using-Lightrun&quot;&gt;Debugging Spring Method Annotations Using Lightrun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729726383/0/baeldung~Migrate-Application-From-Spring-Boot-to-Spring-Boot&quot;&gt;Migrate Application From Spring Boot 2 to Spring Boot 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729167318/0/baeldung~Pitfalls-on-Testing-with-Spring-Boot&quot;&gt;Pitfalls on Testing with Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729729926/0/baeldung~Post-formurlencoded-Data-with-Spring-Cloud-Feign&quot;&gt;Post form-url-encoded Data with Spring Cloud Feign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mariadb.com/resources/blog/reactive-programming-with-spring-data-r2dbc-on-mariadb-skysql/&quot;&gt;Reactive Programming with Spring Data R2DBC on MariaDB SkySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/JavaAtMicrosoft/status/1631750925730676736&quot;&gt;The latest updates to Visual Studio @code for #Java bring support for JUnit 5 parallel testing and a filter widget in the Spring Boot dashboard. Learn more about the February &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Project Panama is so cool! It provides an &lt;em&gt;easy&lt;/em&gt; way to interact with native code. Check out the Baeldung article: &lt;a href=&quot;https://feeds.feedblitz.com/~/729383405/0/baeldung~Guide-to-Java-Project-Panama&quot;&gt;Guide to Java Project Panama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/729647786/0/baeldung~Managing-Multiple-JDK-Installations-With-jEnv&quot;&gt;Managing Multiple JDK Installations With jEnv&lt;/a&gt;. SDKMan and jEnv both provide a fantastic way to automatically manage Java environments.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.4 available now]]></title><link>https://spring.io/blog/2023/03/03/spring-boot-3-0-4-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/03/03/spring-boot-3-0-4-available-now</guid><dc:creator><![CDATA[Jonatan Ivanov]]></dc:creator><pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.4&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;The release was earlier than originally scheduled because of a &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/30031&quot; title=&quot;#30031&quot;&gt;regression&lt;/a&gt; found in Spring Framework and it includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.4&quot;&gt;19 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.4/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>